class Book:
    """Класс для представления книги."""

    def __init__(self, id_: int, name: str, pages: int):
        """
        Конструктор класса Book.
        
        Аргументы:
            id_ (int): Идентификатор книги.
            name (str): Название книги.
            pages (int): Количество страниц.
        """
        self.id = id_
        self.name = name
        self.pages = pages

    def __str__(self) -> str:
        """Возвращает строковое представление книги."""
        return f'Книга "{self.name}"'

    def __repr__(self) -> str:
        """Возвращает строку для инициализации точно такого же экземпляра."""
        return f"Book(id_={self.id!r}, name={self.name!r}, pages={self.pages!r})"


class Library:
    """Класс для представления библиотеки."""

    def __init__(self, books: list[Book] = None):
        """
        Конструктор класса Library.
        
        Аргументы:
            books (list[Book], optional): Список книг. По умолчанию None (пустой список).
        """
        self.books = books if books is not None else []

    def get_next_book_id(self) -> int:
        """
        Возвращает идентификатор для добавления новой книги.
        
        Если книг нет, возвращает 1.
        Если книги есть, возвращает идентификатор последней книги + 1.
        """
        if not self.books:
            return 1
        return self.books[-1].id + 1

    def get_index_by_book_id(self, book_id: int) -> int:
        """
        Возвращает индекс книги в списке по её идентификатору.
        
        Аргументы:
            book_id (int): Идентификатор книги.
        
        Исключения:
            ValueError: Если книги с указанным id не существует.
        """
        for index, book in enumerate(self.books):
            if book.id == book_id:
                return index
        raise ValueError("Книги с запрашиваемым id не существует")


# Пример использования
BOOKS_DATABASE = [
    {
        "id": 1,
        "name": "test_name_1",
        "pages": 200,
    },
    {
        "id": 2,
        "name": "test_name_2",
        "pages": 400,
    }
]

if __name__ == '__main__':
    empty_library = Library()  # Инициализируем пустую библиотеку
    print(empty_library.get_next_book_id())  # Проверяем следующий id для пустой библиотеки (ожидаем 1)

    list_books = [
        Book(id_=book_dict["id"], name=book_dict["name"], pages=book_dict["pages"]) for book_dict in BOOKS_DATABASE
    ]
    library_with_books = Library(books=list_books)  # Инициализируем библиотеку с книгами
    print(library_with_books.get_next_book_id())  # Проверяем следующий id для непустой библиотеки (ожидаем 3)

    print(library_with_books.get_index_by_book_id(1))  # Проверяем индекс книги с id = 1 (ожидаем 0)
    try:
        print(library_with_books.get_index_by_book_id(3))  # Проверяем несуществующий id (ожидаем ошибку)
    except ValueError as e:
        print(e)  # Вывод: Книги с запрашиваемым id не существует