class Book:
    """Базовый класс для всех типов книг."""

    def __init__(self, name: str, author: str):
        """
        Конструктор базового класса Book.
        
        Аргументы:
            name (str): Название книги.
            author (str): Автор книги.
        """
        self._name = name
        self._author = author

    def __str__(self) -> str:
        """Возвращает строковое представление книги."""
        return f"Книга {self._name}. Автор {self._author}"

    def __repr__(self) -> str:
        """Возвращает официальное строковое представление объекта для отладки."""
        return f"{self.__class__.__name__}(name={self._name!r}, author={self._author!r})"

    @property
    def name(self) -> str:
        """Возвращает название книги."""
        return self._name

    @property
    def author(self) -> str:
        """Возвращает автора книги."""
        return self._author


class PaperBook(Book):
    """Класс для бумажных книг."""

    def __init__(self, name: str, author: str, pages: int):
        """
        Конструктор класса PaperBook.
        
        Аргументы:
            name (str): Название книги.
            author (str): Автор книги.
            pages (int): Количество страниц.
        """
        super().__init__(name, author)
        self.pages = pages  # Используем свойство для проверки значения

    def __str__(self) -> str:
        """Возвращает строковое представление бумажной книги."""
        return f"{super().__str__()} Страниц: {self.pages}"

    @property
    def pages(self) -> int:
        """Возвращает количество страниц."""
        return self._pages

    @pages.setter
    def pages(self, value: int) -> None:
        """
        Устанавливает количество страниц.
        
        Аргументы:
            value (int): Количество страниц.
        
        Исключения:
            ValueError: Если количество страниц меньше или равно 0.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError("Количество страниц должно быть целым числом больше 0.")
        self._pages = value


class AudioBook(Book):
    """Класс для аудиокниг."""

    def __init__(self, name: str, author: str, duration: float):
        """
        Конструктор класса AudioBook.
        
        Аргументы:
            name (str): Название книги.
            author (str): Автор книги.
            duration (float): Продолжительность аудиокниги в часах.
        """
        super().__init__(name, author)
        self.duration = duration  # Используем свойство для проверки значения

    def __str__(self) -> str:
        """Возвращает строковое представление аудиокниги."""
        return f"{super().__str__()} Продолжительность: {self.duration} ч."

    @property
    def duration(self) -> float:
        """Возвращает продолжительность аудиокниги."""
        return self._duration

    @duration.setter
    def duration(self, value: float) -> None:
        """
        Устанавливает продолжительность аудиокниги.
        
        Аргументы:
            value (float): Продолжительность в часах.
        
        Исключения:
            ValueError: Если продолжительность меньше или равна 0.
        """
        if not isinstance(value, (int, float)) or value <= 0:
            raise ValueError("Продолжительность должна быть числом больше 0.")
        self._duration = float(value)


if __name__ == "__main__":
    # Пример использования
    book = Book("1984", "George Orwell")
    print(book)  # Используется __str__
    print(repr(book))  # Используется __repr__

    paper_book = PaperBook("Война и мир", "Лев Толстой", 1225)
    print(paper_book)  # Используется __str__
    print(repr(paper_book))  # Используется __repr__

    audio_book = AudioBook("Преступление и наказание", "Фёдор Достоевский", 20.5)
    print(audio_book)  # Используется __str__
    print(repr(audio_book))  # Используется __repr__

    # Попытка изменить name или author вызовет ошибку
    try:
        book.name = "Новое название"  # Ошибка: атрибут только для чтения
    except AttributeError as e:
        print(e)

    # Попытка установить недопустимое значение для pages или duration
    try:
        paper_book.pages = -100  # Ошибка: количество страниц должно быть больше 0
    except ValueError as e:
        print(e)

    try:
        audio_book.duration = 0  # Ошибка: продолжительность должна быть больше 0
    except ValueError as e:
        print(e)

1) Наследование:

Классы PaperBook и AudioBook наследуют атрибуты name и author, а также методы __str__ и __repr__ от базового класса Book.

Метод __str__ перегружен в дочерних классах для добавления информации о количестве страниц и продолжительности.

2) Свойства:

Атрибуты name и author сделаны неизменяемыми с помощью свойств (@property).

Для pages и duration добавлены свойства с проверками на допустимые значения (целое число больше 0 для страниц и число больше 0 для продолжительности).

3) Методы:

Метод __repr__ унаследован от базового класса, так как он универсален для всех типов книг.

Метод __str__ перегружен в дочерних классах для уточнения информации о типе книги.

4) Обработка ошибок:

При попытке установить недопустимые значения для pages или duration выбрасывается исключение ValueError.